---
import Icon from "./IconContainer.astro";

interface ITechnology {
  icon: string;
  name: string;
  link?: string;
  lightcolor?: string;
  darkcolor?: string;
}

const { position, company, description, duration, technologies } = Astro.props;
---

<div class="card">
  <div>
    <h3>{position}</h3>
    <p class="company">{company}</p>
  </div>

  <p class="body">
    {description}
  </p>

  <div class="card-footer">
    <div class="tech-container">
      {
        technologies.map((tech: ITechnology) => (
          <Icon icon={tech.icon} name={tech.name} />
        ))
      }
    </div>
    <div class="date">
      {duration}
    </div>
  </div>
</div>

<style is:global>
  /* .light .card{
border: 2px solid black;
} */
  .card .tech-container {
    flex-direction: column;
  }

  .card {
    /* scale: 0;
opacity: 0; */
    background: var(--card-bg);
    padding: 20px;
    /* box-shadow: 0px 10px 30px rgb(0, 0, 0); */
    border-radius: 10px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    transition: all 0.3s ease;
  }

  .card:hover {
    transform: scale(1.09);
  }

  .card .company {
    color: var(--text-primary);
    margin-bottom: 10px;
  }

  .card h3 {
    color: var(--punch);
    font-size: 1.3rem;
  }

  .card .body {
    margin: 20px 0;
    flex: 1;
  }

  .card-footer {
    display: flex;
    justify-content: space-between;
    align-items: end;
    margin-top: 30px;
  }

  .card-footer .date {
    font-size: 0.8rem;
  }


    /* .card:nth-child(3n + 1):nth-last-of-type(1){
        grid-column: span 3;
    }
  .card:nth-child(3n + 1):nth-last-of-type(1) {
    grid-column: span 3;
  }

    .card:nth-child(3n + 2):nth-last-of-type(1){
        grid-column: span 2;
    } */
  @media (max-width: 1000px) {
    .card:nth-child(2n + 1):nth-last-of-type(1) {
      grid-column: span 2;
    }
  }

  @media (max-width: 550px) {
    .card {
      grid-column: span 1;
    }
  }

  .pop-reverse {
    animation: popr 0.5s ease forwards;
  }

  @keyframes popr {
    0% {
      opacity: 1;
      scale: 1;
    }
    100% {
      opacity: 0;
      scale: 0;
    }
  }

  .pop {
    scale: 0;
    opacity: 0;
    animation: pop 0.5s ease forwards;
  }

  @keyframes pop {
    0% {
      opacity: 0;
      scale: 0;
    }
    100% {
      opacity: 1;
      scale: 1;
    }
  }
</style>

<script>
  const cards = document.querySelectorAll(".card");
  const LIMIT = 200; //px
  const delayConstant = 0.1;

  document.addEventListener("scroll", (_) => {
    let count = 0;

    cards.forEach((card) => {
      const modifiedCard = card as HTMLElement;
      let calculatedDelay = count * delayConstant;
      const cardTop = card.getBoundingClientRect().top;
      if (cardTop < window.innerHeight - LIMIT) {
        modifiedCard.style.animationDelay = `${calculatedDelay}s`;
        card.classList.add("pop");
        card.classList.remove("pop-reverse");
        count += 1;
        modifiedCard.addEventListener("animationend", () => {
          modifiedCard.style.animationDelay = `${0}s`;
        });
      } else if (card) {
        card.classList.remove("pop");
        card.classList.add("pop-reverse");
      }
    });
  });
</script>
